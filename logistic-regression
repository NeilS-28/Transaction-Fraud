import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import precision_score, recall_score
from sklearn.metrics import roc_curve, auc



data = pd.read_csv('creditcard.csv')
print(data.head())
print('\n\nRows and columns: ', data.shape)
print('\n\nColun names: ', data.columns)
print('\n\n', data['Class'].value_counts())
#print("\n\nMissing data in each column: \n\n", data.isnull().sum())
print('Statistical summary: \n\n', data.describe())

#Amount spent
data['Amount'].hist(bins=50)
plt.title("Distribution of Transaction Amounts")
plt.xlabel("Amount")
plt.ylabel("Count")
plt.show()

#Boxplot for Amount by Class(fraud/not fraud)
sns.boxplot(x='Class',y='Amount',data=data)     #Replace 'Class' if needed
plt.title("Transaction Amounts by Class")
plt.show()

#Prepare features and labels
X = data.drop('Class',axis=1) #Features; replace'Class' if named differently
y=data['Class']  #labels

sm = SMOTE(random_state=42)
X_res,y_res = sm.fit_resample(X,y)
print("Balanced Shape:", X_res.shape)

X_train, X_test, y_train, y_test = train_test_split(X_res, y_res, test_size=0.2,random_state=42)

model = LogisticRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)

print("Precision:", precision)
print("Recall:", recall)

y_probs = model.predict_proba(X_test)[:,1]
fpr, tpr, thresholds = roc_curve(y_test, y_probs)
auc_score = auc(fpr, tpr)

print("AUC Score:", auc_score)

plt.plot(fpr, tpr)
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.show()
